/** Specify Utility, Reachable States and other aspects of the state space &theta;.
<a href="#auto">Skip down to documentation of items defined in Bellman.ox</a><p>

@sortkey AAD

<OL class="body">

<li>Overview</li>

<DT>Bellman is derived from the `DP` class.  Classes based on Bellman capture different specifications of the model, especially in terms of the <em>iid continuous state vector</em>, denoted &zeta;.</DT>

<DT>A user bases (derives) <code>MyModel</code> on one of these classes (or a class ultimately derived from them).</DT>
<DD>Example
<pre>
&#35;import DDP

struct MyModel : ExPostSmoothing {
    // declare data members
            Utility(A);
    static Reachable();
    <details><summary>// Optional methods to replace built-in versions</summary>
           FeasibleActions(A);
    static PreUpdate();</details>
    <details><summary>// Optional methods to accommodate new solution methods (advanced)</summary>
           thetaEMax();
           ActVal();
           Smooth();</details>
    }
</pre></DD>

<DD>The continuous state &zeta; determines the form of Bellman's for choice-specific values, which integrates out the IID state vectors, &zeta;, &epsilon; and &eta;.</DD>

<DT>Bellman equation solution <a href="Methods.ox.html">methods</a> are coded separately from `Bellman`.  They are derived from the `Method` class and described in <a href="Methods.html">Methods</a>.</DT>
  <DD>Some methods may only operate if the user's model is derived from a compatible class of `Bellman` or has other required characteristics.</DD>

<DT>Classes of type `Bellman` code the form of Bellman's equation for the specification:
<DD><pre class="math">
V(&theta;&prime;) &equiv;  &sum;<sub>&eta;</sub>  &sum;<sub>&epsilon;</sub>  &int;<sub>&zeta;</sub> [ V(&zeta;,&epsilon;,&eta;,&theta;&prime;) ] f(&zeta;)d&zeta; &Rho;<sub>&epsilon;</sub>(&epsilon;)&Rho;<sub>&eta;</sub>(&eta;)

EV(&theta;&prime;) = E<sub><code>&alpha;</code>,&eta;,&theta;</sub>V(&theta;&prime;)  = &sum;<sub>&theta;&prime;</sub> V(&theta;&prime;) &Rho;(&theta;&prime;;<code>&alpha;</code>,&eta;,&theta;)

v(&alpha;,&zeta;,&epsilon;,&eta;,&theta;) &equiv; U(&alpha;,&epsilon;,&eta;,&theta;,&gamma;) + &zeta;.&alpha; + &delta; EV(&theta;&prime;)

V(&zeta;,&epsilon;,&eta;,&theta;) = max<sub>&alpha;&in;&Alpha;(&theta;)</sub>  v(&alpha;,&zeta;,&epsilon;&eta;,&theta;)
</pre></DD>
<DD>The integration over &zeta; is carried out by the virtual `Bellman::thetaEMax`() or its replacement. .
<DD>The default method,  `Bellman::thetaEMax`(), assumes that &zeta; takes on one value, 0, with density f(0)=1.  (Another way to think of it:  &zeta; is an empty vector.)   Thus, the default does no integration.  </DD>
<DD>Choice probabilities are stored conditional on &eta; and &theta;.  This requires summing over &epsilon; and integrating over &zeta; Another virtual method, `Bellman::Smooth`(), carries out the smoothing of choice probabilities, but only on a final iteration (after convergence in an infinite horizon environment).</DD>
<DD>In the default  choice probabilities are not smooth in model parameters.  That is, conditional choice probabilities are either 0 or 1 based on. The derived class `ExPostSmoothing` allows for ex-post smoothing of choice probabilities without the presence of &zeta;</DD>
</DT>

<li>User-Contributed Elements of <code>MyModel</code> and <code>MyCode</code></li>

<OL class="chapter">
<LI>Utility()</LI>
<DT><code>MyModel</code> must supply a replacement for `Bellman::Utility`(), which simply returns 0.  </DT>
<DT>Since utility depends on the current state, the method must be automatic (not static).</DT>
<DD><pre>
&#35;import DDP

struct MyModel : ExPostSmoothing {
    // define data members and methods
    Utility(A);
    }
MyModel::Utility(A) {
    return  {a vector of utility values given the feasible actions <code>A</code> }
    }
</pre></DD>
<LI>Reachable state creator</LI>
<DT><code>MyModel</code> must include a static method/function that returns a new object of <code>MyModel</code> for any reachable state and 0 otherwise. </DT>
<DT> <code>MyCode</code> must pass this method to <code>DPparent::Inititalize()</code>.</DT>
<DD>Example 1.  All states are reachable
<pre>MyModel::Reachable() { return new MyModel(); }</pre>
Example 2.  States where state variables x and y greater than 5 are not reachable
<pre>MyModel::Reachable() {
    return CV(x)+CV(y)&gt; 5 ? 0 : new MyModel();
    }</pre></DD>
<LI>Restricted Feasible Action spaces / matrices </LI>
<DT><code>MyModel</code> <em>can</em> provide a replacement for the virtual `Bellman::FeasibleActions`() method to make the feasible choice set to vary with the endogenous state &theta;.</DT>
<DD>Example.  Only action vectors with <code>d</code> less than or equal to the value of state variable <code>x</code> are feasible.
<pre>MyModel::FeasibleActions(A) { return A[d.pos][] &lt;= CV(x); }</pre>
</DD>
<LI>Hooks and Update Time</LI>
<DT><code>MyModel</code> can use `Hook::Add`() to have a static method/function called at different points in solution methods.</DT>
<DT><code>MyModel</code> can also use `DP::SetUpdateTime`() to set when solution methods should update transition probabilities and utility of actions.  </DT>
<DD>This allows transitions and utility to depend on fixed and random effect variables, but if they do not wasted computations can be avoided by updating higher up in the process.</DD>

<LI>Value-related routines</LI>
<DT><code>MyModel</code> can supply replacements for `Bellman::thetaEMax`(), `Bellman::ActVal`(), `Bellman::Smooth`().  Many of the derived classes of Bellman already specialize these operations.</DT>

<LI>Auxiliary Variables and ZetaRealization</LI>
<DT><code>MyModel</code> can add `AuxiliaryValues`s and a `ZetaRealization` for simulating outcomes and accounting for partial observability of the state.</DT>
<DD><code>MyCode</code> must sandwich the commands that add actions and states to the model between calls to <code>DPparent::Initialize(&hellip;)</code> and <code>DPparent::CreateSpaces(&hellip;)</code>.  </DD>
<DD><code>MyModel</code> can supply its own version of these two methods, but then they <em>must</em> call the parent versions.  If <code>MyModel</code> does not have its own versions, then the prefix <code>DPparent::</code> is not needed because 
a reference to <code>Initialize()</code> will refer to the parent's version.</DD>
</OL>

</OL>
<hr><a name="auto"><h1>Documentation of  Items Defined in Bellman.ox</h1></a>

**/
