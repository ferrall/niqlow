/** Handling data, simulation, likelihood, predictions, moments.
<a href="#auto"><span class="skip"><abbr title=" Skip down to items defined in Data.ox">&nbsp;&#8681;&nbsp;</abbr></span></a>

@sortkey BAA

<h2>Overview</h2>

The `Data` class and its derivatives are used to simulate DDP data, compute predictions, read external data sets, and interface with <span class="n">Five-O</span>.

`Data` objects relate to realizations along the path of the program.  Unlike other spaces (e.g. the group space <b>&Gamma;</b> and the state space <b>&Theta;</b>), multiple instances of different types of data can be stored simultaneously.  That is, there is no single <q>data space</q>.

There two parallel but separate kinds of data:

<table class="tree">
<tr>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="7" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label">`Data`</td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">The basis of simulation, prediction, and data.</td>
</tr>
<tr>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline">&nbsp;</div></td>
<td class="line"><div class="vline last"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="6" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label">`Outcome`</td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">The concept behind simulating data from a DP and estimation based on likelihood.</td>
</tr>
<tr>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline">&nbsp;</div></td>
<td class="line"><div class="vline last"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="6" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label">`Prediction`</td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">The concept behind average or expect results from the DP and estimation based on GMM.</td>
</tr>
</table>

<H2>Contents</H2>
<OL class="contents">
<LI><a href="#Outcomes">Outcomes</a></LI>
<DD><a href="#SS">Simulation</a></DD>
<DD><a href="#Emet">Likelihood</a></DD>
<LI><a href="#PD">Prediction</a></LI>
<DD><a href="#Track">Tracking Objects to Predict</a></DD>
<DD><a href="#moms">Moments</a></DD>
<DD><a href="#GMM">GMM</a></DD>
</OL>

<h1>Data</h1>

<OL class="body">
<a name="Outcomes"><LI>Outcomes</LI></a>

<OL class="chapter">
<LI>Overview</LI>

<DT>Outcomes are used for simulating the model and for storing external data interpreted as realizations of the DDP.</DT>
   <DD> Here we will denote an outcome generically as <code>Y</code>. <code>Y</code> contains the realized state vectors, action vectors, auxiliary values, etc.  It is described in more detail below.</DD>
    <DD>As discussed elsewhere, the user codes <code>MyModel</code> as a class derived from one of the pre-defined `Bellman` classes. In contrast, `Outcome` is designed to be generic so that it can be used for whatever model or data the program uses. A user does not define their own derived class to store outcomes.</DD>
  <DD>Only one model can be active in <span class="n">DDP</span> because <code>static</code> data members are used, but <em>multiple data sets can be stored at once.</em>  This can be useful when comparing two solution methods applied to one model or two estimation methods applied to two different data sets.</DD>
<DT>Outcomes are related to points in the state space <b>&Theta;</b>, but they are treated distinctly in <span class="n">niqlow</span>.  </DT>
<DD>The state space is represented so as to minimize storage and calculations while solving a model.  On the other hand, outcomes are designed to track everything relevant to results of the DDP, and memory would be exhausted if outcomes were defined and stored for each possible state.</DD>
<DD>It would be inefficient to store all potential outcomes when only one can be realized at each point in a single DP process.</DD>

<DT>A single point in the state space can have multiple states that could come before it or come after it hypothetically.  In contrast, outcomes have well-defined predecessors and successors.</DT>
  <DD>These are tracked as part of the outcome, so that <span class="n">niqlow</span> represents a sequence of outcomes as a doubly-<a href="http://en.wikipedia.org/wiki/Linked_list">linked list</a> of objects of class `Outcome`.</DD>

<DT>An Outcome <code>Y</code> is a basic unit of data. Based on outcomes data structures are defined to keep track of ordered and unordered groups of outcomes.
<table class="tree">
<tr>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="7" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label"><a href="Data.ox.html#Outcome">Outcome</a></td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">A single realization of a discrete DP, denoted <code>Y</code>.</td>
</tr>
<tr>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline">&nbsp;</div></td>
<td class="line"><div class="vline last"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="6" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label"><a href="Data.ox.html#Path">Path</a></td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">A derived Outcome that points to a sequence of outcomes along a single realized DP path. As an outcome itself, the path is also the first
    outcome along itself:
    <DD class="disp">
    PATH::Y<sub>0</sub> &#8646; Y<sub>1</sub> &#8646; &nbsp; &hellip;&nbsp;  Y<sub>T</sub>&nbsp; &#8677;</DD>
    The outcomes on a path are ordered and they "point" to both their predecessor and successor.  (In computer speak, a Path is a doubly-linked list.)  This
    is because some processing of paths go forward (such as simulating outcomes) and some backwards (computing likelihood when accounting for unobserved states).
    </td>
</tr>
<tr>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline">&nbsp;</div></td>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline last"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="5" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label"><a href="Data.ox.html#FPanel">FPanel</a></td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">A Path that can point to more paths that all share the same fixed effect values.  As a Path itself, the FPanel
is the first path in the panel.
    <DD class="disp">
    FPANEL::PATH<sub>0</sub> &#8614; PATH<sub>1</sub> &#8614; &nbsp; &hellip;&nbsp;  PATH<sub>N</sub>&nbsp; &#8677;</DD>
    The different paths in a FPANEL point to their successor only because it is typically not necessary to process them in both directions.
</td></tr>
<tr>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline">&nbsp;</div></td>
<td class="line">&nbsp;</td>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline last"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="4" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label"><a href="Data.ox.html#Panel">Panel</a></td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">A heterogenous panel, is a FPanel which can also point to more FPanels. The Panel is the first
fixed panel in the list.
    <DD class="disp">
    PANEL::FPANEL<sub>0</sub> &#8614; FPANEL<sub>1</sub> &#8614; &nbsp; &hellip;&nbsp;  FPANEL<sub>M</sub>&nbsp; &#8677;</DD>
    Different FPANELs in a PANEL point to their successor only because it is typically not necessary to process them in both directions.
</td></tr>
</td>
</tr>
<tr>
<td class="line">&nbsp;</td><td class="line"><div class="vline">&nbsp;</div></td>
<td class="line">&nbsp;</td><td class="line">&nbsp;</td><td class="line">&nbsp;</td>
<td class="line"><div class="vline last"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="3" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label"><a href="Data.ox.html#OutcomeDataSet">OutcomeDataSet</a></td></tr>
   <tr class="bottom"><td class="line">&nbsp;</td></tr>
</tbody></table>
</td>
<td class="text">A panel with data-handling tools. Unlike the other derived classes, a data set does not point to other panels.
    <DD class="disp">
    DATA::PANEL
    </DD>
</td>
</tr>
</table>

<LI>Examples</LI>
<DT>Create a data set from external data</DT>
<dd><pre>
	data = new OutcomeDataSet("DPdata",method,TRUE);
	data->Observed(x,"x",d,"d");
	data->IDColumn("id");
	data->Read("data.dta");	
</pre></dd>
<DT>Create a simulated data set from a solved DP model and save to a Stata data set</DT>
<DD><pre>
    sim = new Panel("DPdata");
    sim -> Simulate(10,400,0,TRUE);
	sim -> Print("sim.dta");		
</pre></dd>

<li>The Full Outcome</li>

<span class="n">DDP</span> is designed to handle programs for which not everything observed by the agent is observed by the econometrician.  In addition, <span class="n">DDP</span> is designed to handle observables that are functions of the underlying outcomes but are not necessarily of any (direct) interest of the agent.  To provide these  capabilities, first consider the case of the fully observed realization of the DP.

<DT>Let the Y* denote the vector of <em>all</em> actions and all <em>realized states</em> in the model.  Generically, </DT>
<dd><pre>
Y* &equiv; (&alpha; &zeta; &epsilon; &eta; &theta; &gamma; &chi; Y*<sup>p</sup> Y*<sup>n</sup>)
    &alpha; = (a<sub>0</sub> &hellip; )
    &zeta; = (z<sub>0</sub> &hellip; )
    &epsilon; = (e<sub>0</sub> &hellip; )
    &eta; = (h<sub>0</sub> &hellip; )
    &theta; = (q<sub>0</sub> &hellip; )
    &gamma; = (g<sub>0</sub> &hellip; )
    &chi; = (x<sub>0</sub> &hellip; )
</pre>
For simplicity the length of each of the vectors is not specified and the right-most elements of each of the vectors is not included. Instead, each vector is shown as the leftmost variable with subscript 0 followed by &hellip;.
</dd>
<DD>Y* is referred to as the <em>full outcome</em> because it includes all information that is knowable and relevant about a single period in a realized DDP.</DD>
<DT>Y* adds a new vector denoted &chi; with generic elements x.  See below.</DT>
<DT>Y* also includes Y<sup>p</sup> Y<sup>n</sup>, which are <q>pointers</q> to the preceding and next outcomes in the path. </DT>
<DD>These values can be undefined for various reasons. Obviously the value of Y<sup>n</sup> is not realized until the end of the current period.  And the initial period obviously has no preceding outcome. However, in the middle of a panel of observation both pointers would be defined.</DD>

<DT>The full outcome may not be observed in data.  The observed outcome, <var>Y</var>, will have the same structure as <var>Y*</var> but one or more elements of the member vectors will include missing (.NaN) values.  </DT>
<DD>Observability is discussed below when the derived  <a href="">Data</a> class is introduced.  Its purpose is to account for gaps between theoretical outcomes and observed results from a DP.</DD>


<li>Paths </li>

The base `Outcome` class captures a single period, and it points to the previous outcome and the next outcome along a realized path (if the predecessor and successor exist).  A `Path` is derive from `Outcome`, so the first outcome on the path is stored directly by the path (since it is an outcome itself).  But `Path` also has a `Path::last` data member which points to the last outcome on the path.  Because both the previous and next outcomes are defined a `Path` can be processed both forwards and backwards.  That is, a path is a doubly-linked list.

<!--
Image Y*  Y* Y* ...
-->

Finally, `OutcomeDataSet` is a class derived from `Panel` that includes methods to read in outcomes from data accounting for partial or complete unobservability of actions and states.

This organization can be seen by clicking on <em>hierarchy</em> in the upper right corner of any page of DDP documentation.

A `Path` is a derived class from `Outcome`.  The difference is that a path tracks a sequence of outcomes generated by realizations of a single DP problem.  The outcomes in a path are a <em>linked list</em>.  Since a path is itself an outcome the first outcome is the path itself.  `Outcome` tracks both the <em>next</em> and <em>previous</em> outcome in the realized path.  Further, the path stores the last outcome in the path, which makes it possible to work either forwards or backwards in the sequence.<p>

<li>Panels</li>

In turn, a <b>fixed panel</b> (`FPanel`) is a list of `Path`s that share the same fixed effects. FPanel tracks the following path so a panel can be processed sequentially as a linked list.  (Because paths in a panel are not ordered the previous path is not stored.)

In turn a `Panel` is a list of fixed panels.

<a name="SS"><LI>Simulation</LI></a>

Simulation is a method of each level of Outcome up to and including a Panel.  A simulation uses the specified initial conditions, the endogenous conditional choice probabilities, and the transitions of all states to produce simulated realizations of the DP.  The simulate panel could then be loaded as data set
to conduct a Monte Carlo estimation procedure.

During simulation, the vector &zeta; is filled in before calling <code>Auxiliary()</code>.  Since choices are simulated directly from choice probabilities, the simulated values of &zeta; are conditional on the simulated choice.  This is achieved by calling `Bellman::ZetaRealization`() or its replacement.  For example, the version for ex post extreme value models would simulate a &zeta; vector that follows the IID extreme value distribution but consistent with the simulated action at that state.  The user can replace <code>ZetaRealization()</code> with their own.  The <code>Auxiliary()</code> method can access the realization in `DP::zeta`, a static value  which is only defined during simulation.  On the other hand, the user's <code>Auxiliary</code> method could include additional randomness directly.

<DT>Initial Conditions</DT>
<DD>Fixed states, &gamma;</DD>
<dd>Endogenous states, &theta;</dd>
<dd>Sampling from the stationary distribution</dd>

<LI>Observed and Partially Observed Outcomes</LI>
<DT>Recall that <em>Y*</em> is the full realized outcome of the DP model is a single period.  It includes all states, actions and auxiliary variables.  In practice the full outcome is not directly observed.  The limited information can be variables whose realized values are simply missing, or they only affect an auxiliary variable which combines other elements of the outcome.  </DT>
<DD>Express the <em>observable outcome</em> as<pre>
Y = &equiv; (x<sub>0</sub> &hellip; x<sub>&chi;.N</sub>  - - &hellip; a<sub>o0</sub> - &hellip; - a<sub>o1</sub> - &hellip; - z<sub>o0</sub> - &hellip; - e<sub>o0</sub> - &hellip; - h<sub>o0</sub> - &hellip; - q<sub>o0</sub> &hellip; - g<sub>o0</sub> - &hellip; )
</pre></DD>
<DT>Here <q>-</q> indicates censoring of elements of Y*, and a<sub>o0</sub> is the first observed action variable.</DT>
  <DD>So if o0 = 3 it means a<sub>3</sub> is the first element of <code>&alpha;</code> that is in the observed outcome.  Between a<sub>o0</sub> and a<sub>o1</sub> are any action variables not observed and indicated by <q>- &hellip; -</q>.  The same is true of the state vectors.  </DD>
<DT>By definition all elements of the auxiliary vector are observable.  This is not necessarily a template that all observations must follow.  It is possible that some elements of Y* are observed in some cases but not others.  </DT>
<DD>The auxiliary variables provide great flexibility.  Suppose the value of an action variable a<sub>d</sub> is unobserved, but it is known the realized value is with some sub-range of the potential values.  Then x<sub>0</sub> and x<sub>1</sub> could be the min and max values of a<sub>d</sub>, respectively.  A derived likelihood function would add up the conditional probabilities of actions between those two values.<DD>


<a name="Data"><LI>Data Sets</LI></a>

The `OutcomeDataSet` class is derived from `Panel`.  It adds to the notion of a (heterogeneous) panel methods to read in external data and to account for observability and unobservability of aspects of the DP.

<h3>Observability</h3>

<h3>Getting Data</h3>

<DT>Methods for storing and processing data are included.  Data are read in from outside formats such as Stata using Ox's built-in capabilities in the <code>Database</code> class.  If the same labels are used for state and action variables as in the data set, the methods can seamlessly relate the data to the corresponding element of the model.</DT>

<DD>A key issue with estimating DDPs is unobservability of actions and states.  <code>Outcome</code> handles this  two ways.  First it treats missing (<code>.NaN</code>) in the data as unobserved.  It  will then integrate (sum over) values of missing states and actions when computing, say, the likelihood of the data.  Second, auxiliary data (sometimes called payoff relevant variables) can be included in the data and then coded so that they indicate which variables and values should be integrated over.</DD>

<a name="Emet"><LI>Likelihood</LI></a>

</OL>

<a name="PD"><LI>Prediction</LI></a>

<OL class="chapter">
<LI>Overview</LI>

The <a href="#Outcomes">Outcome</a> class is designed to work with realized results from a DP model.  That is, at one point in time there is a single realization.  For this reason, simulation, individual-level data and likelihood functions are related to Outcomes.

On the other hand, the `Prediction` class is designed to handle the distribution of outcomes at a given time.  It is designed to handle integrating out uncertainty.  For this reason, prediction and generalized method of moments (GMM) are related to Predictions.

The base class `Prediction` tracks a list of possible state indices and their associated probabilities of occurring.  It also tracks choice probabilities.

Starting from some initial conditions a `PathPrediction` is a list of predictions, each providing the distribution across states and choices at that point in time.  A `PanelPrediction` is a set of `PathPrediction`s across fixed effect groups.  Data can be read in to match up with predictions using the `PredictionDataSet` class derived from `PanelPrediction`.

<table class="tree">
<td class="line">&nbsp;</td>
<td class="line"><div class="vline"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="7" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label">`Prediction`</td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">The expected outcome from a single realization.</td>
  </tr>
<tr>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline">&nbsp;</div></td>
<td class="line"><div class="vline last"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="6" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label">`PathPrediction`</td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">A derived Prediction that points to a sequence of predictions along a single realized DP path. As an prediction, the path itself is the first prediction along the path.  Since random effects are assumed to be unobserved, the path prediction integrates over any random effect groups that are in the model.  There is only one prediction for a given fixed effect group, so there is nothing like the `FPanel` class derived from Outcomes. Each PathPrediction is in effect a FixedPathPrediction</td>
</tr>
<tr>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline">&nbsp;</div></td>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline last"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="5" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label">`PanelPrediction`</td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">A list heterogenous path predictions.  It is a PathPrediction which can also point to more PathPredictions. As a PathPrediction itself, the PanelPrediction is the first path in the panel.</td></tr>
<tr>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline">&nbsp;</div></td>
<td class="line">&nbsp;</td>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline last"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="4" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label">`PredictionDataSet`</td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">A panel prediction with data-handling tools. Unlike the other derived classes, empirical moments do not point to other panel predictions.</td>
</tr>
</table>

<a name="moms"><LI>Moments</LI></a>

Histogram

<a name="GMM"><LI>GMM</LI></a>

</OL>

</OL>
@author &copy; 2011-2017 <a href="http://econ.queensu.ca/~ferrall">Christopher Ferrall</a></dd>

<a name="auto"><hr><h1>Documentation of  Items Defined in Data.ox <a href="#"><span class="skip"><abbr title=" Back to top">&nbsp;&#8679;&nbsp;</abbr></span></a></h1></a>

**/
