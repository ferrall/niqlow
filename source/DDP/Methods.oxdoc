/** Different ways to solve the dynamic program.
<a href="#auto"><span class="skip"><abbr title=" Skip down to items defined in Methods.ox">&nbsp;&#8681;&nbsp;</abbr></span></a>

@sortkey ACA


<OL class="body">

<li>Overview</li>

Objects derived from the `Method` class are algorithms that solve the user's DP problem.  A user's program can create more than one method object and apply each to the problem.

Every Method has a <code>Solve()</code> function that applies the method to the DP problem.

The method can be sent as an argument to <a href="Data.ox.html">Data</a> or other objects so that the solution can be nested within some other process.

<DT>Example: after setting up the DP problem apply value function iteration to the problem:</DT>
<DD><pre>
&vellip;
CreateSpaces();
decl vmax = new ValueIteration();
vmax.Volume = LOUD;               //V(&theta;) printed when computed
vmax -&gt; Solve();
&vellip;
</pre></DD>
<DT>Methods are General</DT>
<DD>Unless the method relies on a specific clock (e.g. <code>ERGODIC</code>) the method will properly iterate on whatever clock the model uses.  For stationary models (or for stationary
phases of a model) the fixed point will be found.  For finite horizon models/phases, backward induction will be used.</DD>
<DT>Two or more solution objects can be created and applied to the model for comparison purposes.</DT>
<DT>Solution methods work at the highest level of the DP environment.</DT>
<DD>To carry out the work they call methods to handle fixed and random effects.</DD>
<DD>The basic structure of a what happens with a call to <code>Solve()</code>
<table class="tree">
<tr>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="7" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label">`ValueIteration::Solve`</td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">Use a method to solve Bellman's equation for all DPs by calling the `FixedSolve`() task.</td>
</tr>
<tr>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline">&nbsp;</div></td>
<td class="line"><div class="vline last"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="6" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label">`FixedSolve`</td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">Loop over fixed effect variables in &gamma;, solve each problem by calling the `RandomSolve`() task.<br>Reuse the solution storage space for each fixed effect to conserve on memory.</td>
</tr>
<tr>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline">&nbsp;</div></td>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline last"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="5" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label">`RandomSolve`</td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">For the current fixed group, loop over random effect variables in &gamma;. Solve each problem by calling `Method::GSolve`().<br> Reuse value iteration space but store choice probabilities for all random effect groups.</td></tr>
<tr>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline">&nbsp;</div></td>
<td class="line">&nbsp;</td>
<td class="line">&nbsp;</td>
<td class="line"><div class="vline last"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="4" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label">`Method::GSolve`</td></tr>
   <tr class="bottom"><td class="line"><div class="vline">&nbsp;</div></td></tr>
</tbody></table>
</td>
<td class="text">Given the fully specified fixed vector &gamma;, which defines an element of the group space, solve the DP problem.</td>
</tr>
<tr>
<td class="line">&nbsp;</td><td class="line"><div class="vline">&nbsp;</div></td>
<td class="line">&nbsp;</td><td class="line">&nbsp;</td><td class="line">&nbsp;</td>
<td class="line"><div class="vline last"><div class="hline">&nbsp;</div></div></td>
<td style="height:1px; width:auto;" colspan="3" class="fffix">
<table class="labelwrapper">
   <tbody><tr><td class="label">Inner loop of GSolve</td></tr>
   <tr class="bottom"><td class="line">&nbsp;</td></tr>
</tbody></table>
</td>
<td class="text"><pre>
    0. `EndogUtil`         initialize over endogenous states &theta;
    1. `ValueIteration::Run`            loop over bellman iterations (or other task)
    2. `ValueIteration::Update`         check convergence/work backwards (return to 1 until finished.)</pre>
</td></tr></table></DD>
<DT>Hooks</DT>
<DD>The user can insert static functions at different points in this process using the `Hooks::Add`().</DD>
<DD>`HookTimes` are the integer codes for when the function should be called.</DD>
<DD>For example, to say hello after the inner loop above is done i.e. <code>GSolve()</code> ends, do this:<pre>
 sayhello() { print("hello"); }
 &vellip;
 Hooks::Add(PostGSolve,sayhello);
</pre></DD>

<li>Value Function Iteration Methods</LI>

Value function iteration applies Bellman's <code>V(&theta;) = max U() + &delta;EV(&theta;&prime;)</code> to solve for the value function and optimal choice probabilities.

<OL class="chapter">
<LI>Brute Force Iteration</LI>
<DT>`ValueIteration` performs <q>brute force</q> Bellman Equation iteration.</DT>
<DD>Example<pre>
CreateSpaces();
&vellip;
decl vmax = new ValueIteration();
vmax -&gt; Solve();
</pre></DD>
<LI>Keane-Wolpin Approximation</LI>
<DT>`KeaneWolpin` is derived from `ValueIteration` and approximates the solution to the value function at a subsample of the state space.</DT>
<DD>Example<pre>
CreateSpaces();
&vellip;
SubSampleStates(0.4);
decl kw = new KeaneWolpin();
kw -&gt; Solve();
</pre></DD>
</OL>

<LI>Conditional Choice Probability Methods</LI>

CCP methods use estimates of conditional choice probabilities and inverts a function of them to compute (differences in) the value function without Bellman Iteration.  They rely on the `CCP` task which smooths data on observed choices to produce an estimate of &Rho;*(&alpha;;&theta;) that does require a solution to V(&theta;).

<OL class="chapter">
<LI>Hotz-Miller</LI>
<DT>`HotzMiller` is the basic CCP method that inverts a function of the estimated CCPs to compute (differences in) the value function without Bellman Iteration.  </DT>
<DD>Example<pre>
CreateSpaces();
&vellip;
HM = new HotzMiller(data);
</pre></DD>


<LI>Aguirregabiria and Mira</LI>
<DT>`AguirregabiriaMira` is derived from `HotzMiller`.  It iterates on the Hotz-Miller inverstion to gain efficiency in estimates</DT>
</OL>

<LI>Hybrid Solution Methods</LI>
<DT>Some methods for solving DDP rely not on non-linear optimization and root-finding.  These methods combine <span class="n">DDP</span> and <span class="n">FiveO</span>.  </DT>
<DT>They are categorized as <a href="..\Hybrids\default.html">Hybrid Methods</a> and discussed separately.</DT>

</OL>
</OL>
<a name="auto"><hr><h1>Documentation of  Items Defined in Methods.ox <a href="#"><span class="skip"><abbr title=" Back to top">&nbsp;&#8679;&nbsp;</abbr></span></a></h1></a>

**/
