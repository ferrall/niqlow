/** Continually varying scalars and vectors to be optimized.
<a href="#auto"><span class="skip"><abbr title=" Skip down to items defined in Parameters.ox">&nbsp;&#8681;&nbsp;</abbr></span></a>

@sortkey ABA

<OL class="contents">
<LI><a href="A">Overview</a></LI>
<LI><a href="#B">Scaling and Constraining</a></LI>
<LI><a href="#C">Creating a new Parameter Class</a></LI>
</OL>

<OL class="body">
<a name="A"><LI>Overview</LI></a>
A `Parameter` represents a <em>continuously</em> varying quantity. This is opposed to quantities of the `Discrete` class designed for finite ranges, usually integer values. <span class="n">FiveO</span> optimizes the objective over a list of parameters.  Parameters are created and initialized as new objects derived from the `Parameter` class then added to the optimization list using `Objective::Parameters`().</p>

Parameters not added to the objective are not optimized. So the model can contain items stored as parameters but not visible to `Algorithm`s. On the other hand, parameters can be added to the objective even if they are not free to vary during optimization. One way is to make the parameter an object of the `Determined` class.  Its value can be equal to a constant or kept equal to another parameter or a function of other parameters. Another way to temporarily fix a parameter (for iterations of an algorithm) is to toggle its <code>`Parameter::DoNotVary`</code> property. Parameters that are not determined and are added to the objective will be controlled by the optimization algorithm.</p>

<a name="B"><LI>Scaling and Constraining</LI></a>
By default, parameters are <em>scaled</em> during optimization. Scaling of parameters is performed so that algorithms typically work with values near 1.0 even when the actual values is very large or small in absolute value.  This can help algorithms work efficiently. Scaling can be turned off (for all parameters), using `Objective::ToggleParameterConstraint`().</p>

The feasible values of a parameter can be determined by <em>constraining</em> the parameter. Parameter constraints are set by which derived `Parameter` class it is used to create it. Constraints are imposed through monotonic transformations of the parameters.  For example, if <var>x&gt;0</var>, then FiveO will set <var>x.v = exp(s*f)</var>, where <code>f</code> is the value under control of the algorithm and <code>s</code> is a fixed scaling factor set so that <var>exp(s) = x<sub>0</sub></var>, or <var>s = ln(x<sub>0</sub>)</var>.  That is, the value of <code>s</code> ensures that at the start of the algorithm the free parameter is 1 and the structural parameter starts at the initial value.</p>

Parameter constraint is always within an <em>open interval</em>. The interval can be dynamic, in that lower and/or upper bounds can depend on the <em>current</em> value of some other parameter or a function of other parameters. Dynamic constraints are imposed in the order parameters are added to the model.  So if the range of feasible values for parameter <var>x</var> depends on some other parameter <var>y</var>, it follows that <var>y</var> <b>must</b> be added
to the parameter list before <var>x</var>. When the starting values are near their optimal values scaling and constraining is not necessary and it distorts the Hessian of the parameter vector.  So `Objective::ToggleParameterConstraint`() turns off both scaling and constraints for parameters that are not determined. The algorithm then works with the parameter <var>x</var> directly and inferences based on the Hessian is direct.</p>

<li>Parameter Blocks</li>
Parameters can be grouped together into a `ParameterBlock`. This might be done because their values are related to each other or simply for convenience. For example, in  multiple equation econometric model each equation could have a block of the `Coefficients` class for its coefficients. Sets of parameters that lie on the unit Simplex or should be ordered (increasing or decreasing) ared handled by built in blocks. The user's program adds the parameter block to the model using `Objective::Parameters`().  Individual parameters in the block are added by that function and should not be added to the model separately.</p>

<li>Encoding Starting and Ending Values</li>
Staring values of parameters can be set several different ways. Starting values for sequential algorithms are set using the <code>Encode()</code> method for the objective class. Different kinds of objective have different <code>Encode()</code> but they do similar things.  When parameter objects are created using the <code>new </code> operator, their current value (<code>.v</code>) is always set to the hard-coded value sent to the <em>constructor</em>.  As parameters are added to the objective the <em>current</em> parameter vector $\psi$ is built up from the hard-coded starting values.  These hard-coded values can be thought of the default or reset values of the parameters.  The program can start at the default values by to start there by an initial call <code>Encode(0)</code>.   When an integer is sent to <code>Encode</code> then the <em>starting</em> values of all the parameters will be set to their <em>current</em> values. Since the hard-coded value is used to initialize <code>.v</code>, an initial call <code>Encode(0)</code> uses them as the starting values.</p>

If an optimization algorithm has already run and modified the current values of the free parameters, then another call of the form <code>Encode(0)</code> will set that point as the new starting values.  Scaling of parameters will be reset as well. Consider this code segment: <DD><pre>
 alg1 -&gt; Iterate(0);
 ToggleParameterConstraint();
 Encode(0);
 alg2 -&gt; Iterate(0);</pre>
 Optimization algorithm <code>alg1</code> iterates.  It started at some parameter vector $\psi_0$ which was determined higher up in the code.  When it completes it leaves the values of parameters at the best values so far, $\psi = \psi_1$.  The user then wants to turn off all scaling and constraining.  The <code>Encode(0)</code> statement then is equivalent to $\psi_0 = \psi_1$.  The second algorithm starts at that point and would end at some $\psi =  \psi_2$.  The user could then compute the Hessian of the parameter vector $\psi$ knowing that it will be computed at the new best, $\psi_2$ and the values will be based on the structural parameters themselves without any transformation.</DD>
 
Alternatively, the program can pass new starting values as the argument, <code>Encode(xstart)</code>.  Now both the internally stored starting and current vectors would be set to <code>xstart</code>.  In addition, scaling and initial free vectors are set so that an algorithm can go to work.  Starting values can also be read into the program from a file using <code>Load()</code></p>.

Free parameters are converted to structural parameters with the `Objective::Decode`() method. The user will only call <code>Decode</code> themselves if they are writing their own optimization algorithm or performing a related operation. This is because all algorithms and other operations using the user's objective will call <code>Decode()</code> internally before making a call to <code>vfunc()</code>.  An important duty of <code>Decode()</code> is to ensure that each parameter object's <code>v</code> member is set equal to the current value in the (internal) $\psi$ vector. That is, the user's program will rarely if ever have to refer to a parameter vector.  They simply refer to current or starting values of individual parameters and parameter blocks.</p>

<a name="C"><LI>Creating a new Parameter Class</LI></a>

The user can define their own type of parameter or block.  This could be derived from an existing class as a special case that requires fewer inputs from the user.  The class must include <code>Encode()</code> and <code>Decode()</code> if these act differently than the versions for the parent class.</p>

</OL>
@author &copy; 2011-2017 <a href="http://econ.queensu.ca/~ferrall">Christopher Ferrall</a></dd>

<a name="auto"><hr><h1>Documentation of  Items Defined in Parameters.ox <a href="#"><span class="skip"><abbr title=" Back to top">&nbsp;&#8679;&nbsp;</abbr></span></a></h1></a>
**/
