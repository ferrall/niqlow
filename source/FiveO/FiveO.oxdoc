/** A Guide to FiveO: <b>O</b>bject <b>O</b>riented <b>O</b>bjective <b>O</b>ptimization in <b>O</b>x.

@sortkey AAB

<OL class="contents">CONTENTS
<LI><a href="#O">Overview</a></LI>
<LI><a href="#N">Notation</a></LI>
<LI><a href="#D">Formal Definition</a></LI>
<LI><a href="#S">Set up, initialize, solve</a></LI>
<LI><a href="#C">Checkpointing</a></LI>
<LI><a href="#OX">Comparison with Standard Ox Components</a></LI>
<OL class="section">
 <LI><a href="#A">If you use <code>maximize</code> already</a>
<LI><a href="#B">If you use <code>Modelbase</code> already</a>
</OL>
</OL>

<OL class="body">

<LI><a name="O">Overview</a></LI>
<em>Note:</em> If you want to follow a simple example go to <a href="GetStarted.html">Get Started with FiveO</a>

<span class="n">FiveO</span> is designed to implement two closely related mathematical programs, both of which involve choosing a <code>N x 1</code> vector, denoted $\psi$.  Either
<DD><em>Maximize</em> a real-valued function $f(\psi)$, so in this case $f:\Re^N\to\Re$.</DD>
<dd><em>or</em></dd>
<DD><em>Find</em> a root of the non-linear system $f(\psi)$, so $f:\Re^N\to\Re^M$, $N\ge M$.</DD>
The objective/system is coded by the user as a object derived from the `Objective` class.  If $f$ is an objective then the objective is by default a sum of &fnof;.M&oline; component functions:
$$f(\psi)= \sum_{i=0,\cdots,M^-} f_i(\psi),$$
where M&oline; is shorthand for M-1.  This means the user can code, say, the sample log-likelihood vector or moment conditions vector. <span class="n">FiveO</span> adds up the vector and in turn can compute the so-called <em>gradient matrix</em> while implementing the `BHHH` algorithm.
If $f(\psi)$ is a system, then notice that it does not look square: $N$ parameters map to $M$ equations.   However, this is because $\psi$ may, from the user's point of view, contain parameters that are not varying while finding the solution.  It must be the case that the <em>variable</em> components of $\psi$ must number M.</p>

The user can give the problem/system to be solved a name that means something, but in these notes we will call your problem <code>MyObjective</code>. In <span class="n">FiveO</span>, <code>MyObjective</code> is an Ox <code>class</code> derived from one of the built-in classes derived from the base `Objective`. The objective <code>&fnof;()</code> is the column sum of <code>MyObjective::vfunc()</code>, a user-provided function (method).  The system would be the column itself, not the sum.</DD>

Unlike non-OOP approaches, the parameter vector $\psi$ is not represented (simply) as a vector of real numbers. Instead, individual parameters are
members of <code>MyObjective</code> and are objects derived from the `Parameter` class. So $\psi$ is internally stored as a list (an <code>OxArray</code>) of parameters, but in <code>MyObjective</code> each parameter is simply a variable, like <var>x</var> or <var>y</var>. Parameters can be constrained and related to each other. A `ParameterBlock` will hold a vector of parameters to be treated together, like the coefficient vector &beta; in a regression.

Optimization/root-finding is carried out by invoking one of several standard algorithms which are classes derived from the base `Algorithm` class.
The algorithm operating on <code>MyModel</code> is denoted <code>Alg</code> (to avoid repeatedly writing <q>the algorithm applied to the objective/system ...</q>).
Multiple objectives and nested objectives can be handled by creating new objects (new instances of <code>MyObject</code> or different classes).
This is a major distinction between <span class="n">FiveO</span> and <span class="n">DDP</span>, which is designed to hold just one DP model at a time.
<span class="n">FiveO</span> is designed to optimize over a handful, dozens, or a few hundred parameters, and problems of this scale do not tax
the memory capacity of computers. Thus, almost all members of `Objective` are <em>automatic</em>, specific to the <code>new</code> object. (On the other hand, DDP is designed to represent very large state spaces so as many members of that class are declared <em>static</em> as possible.</p>

<a name="N"><LI>Notation</LI></a>
Individual parameters are lower case Roman (x, y, etc.) or lower case Roman with subscripts (x<sub>0</sub>, x<sub>1</sub>, etc.). For this guide,  generic parameter will be denoted x and when ordering matters x<sub>i</sub>. Parameters are not just numbers.  They are objects of a class derived from `Parameter`.</p>

Parameters, as objects, have several properties associated with them. The initial value of x, before <code>Alg</code> begins, is denoted <code>x.0</code>.  Thus the first element of $\psi$ is initially set to <code>x<sub>0</sub>.0</code>. The current value of x at some point in the algorithms operation is <code>x.v</code>. The <em>open</em> range of feasible values for x, for a parameter that an algorithm can vary, is an <em>open</em> interval denoted <code>x.I</code>, where <code>x.I</code> &sube; &real;.  For example, if x is a `Free` parameter it can take on values in the range <code>x.I = (-&infin;,+&infin;)</code>.   A `Positive` parameter has interval <code>(0,&infin;)</code>.  A key feature of <span class="n">FiveO</span> is that the bounds of <code>x.I</code> can be <em>dynamic</em>: they can depend on the current values of other elements of $\psi$.  This dependence must be forward: the range of a parameter can only depend on elements that come before it in $\psi$.  That is, for <code>i &gt; 0</code>, the interval can be written explicitly as x<sub>i</sub>.I(x<sub>0</sub>.v, &hellip;, x<sub>i&oline;</sub>.v).  Using x<sub>0</sub>.v emphasizes that the interval can depend on the current values of preceding values, and then x<sub>i</sub>.v &in; x<sub>i</sub>.I. For standard algorithms to work, the intervals must always be <em>smooth</em> functions of their arguments.</p>

A parameter of class `Determined` will not be under the control of the algorithm. That is, a determined parameter is a point, or closed interval of the form <code>x.I = [d,d].</code>. The value <code>d</code> is determined by something else, usually a fixed constant or a function of other parameters in $\psi$. For example, a determined parameter could be set equal to the average of two other parameters, <code>z = (x+y)/2</code>.  <span class="n">FiveO</span> would ensure that restriction on z holds.  The algorithm knows only about x and y. Two or more parameters can form a `ParameterBlock`, denoted as upper case Roman (X, Y, etc.). This allows <code>MyModel</code> to refer to a single variable which is a vector not  a scalar.  Parameter blocks are, in effect, sub-vectors of the overall parameter vector.</p>

The parameter vector, denoted $\psi$, generically takes the form
$$\psi = \pmatrix{x_0& x_1 &\cdots& x_{N^-}},$$
where N&oline; is shorthand for N-1. $\psi$ is built up by adding parameters and parameter blocks to it.  The number of dimensions, N, is also written $\psi$.N. The <em>parameter space</em>, <code>&Psi;</code>, is the Cartesian product of the intervals for the elements of $\psi$,
$$\Psi \equiv \times_{n=0}^{N^-}\psi_n.I.$$
<code>MyObject</code> may tell <code>Alg</code> not to vary some parameters in $\psi$ directly. A `Determined` parameter does not have an interval, it has a point value, x.I &in; &real;. As with feasible intervals, x.I can be a function of the current value of preceding parameters. The feasible parameter space can only be defined implicitly:
$$\Psi \equiv \{\psi = (x_0 \cdots x_{N^-}) :  x_0 \in x_0.I,  x_1\in x_1.I(x_0), \dots ,x_{N^-}\in x_{N^-}.I(x_0,\dots,x_{N-2}) \}.$$
By using predefined parameter classes and parameter blocks this complex and very flexible parameter space emerges naturally from the parameters added to <code>MyModel</code>.

<code>Alg</code>, as a sequential algorithm, can be thought of as a function $S: \Re^N\rightarrow \Re^N.$ S maps the starting vector $\psi$.0, to a final value, $\psi^S \approx \psi^\star$.</p>

<a name="D"><LI>Formal Definition</LI></a>

The overall optimization problem for is defined as trying to find for a given $f : \Re^N \rightarrow \Re$ the optimizing vector
$$\psi^\star  =  \arg\max_{\psi \in \Psi}\quad f(\psi).$$
The output of the algorithm is an approximation of that problem: $S(\psi.O) \equiv \psi^S \approx \psi^\star.$</p>

The overall problem for system solving is defined as trying to find for a give $f: \Re^N \rightarrow  \Re^M$,  $N \ge M$ such that
$$\psi^\star \in \Psi \&  f(\psi^\star) =  \overrightarrow{0}$$
and $S(\psi.O) \equiv \psi^S \approx \psi^\star$.  Here $\overrightarrow{0}$
 is a vector of zeros of length M.</p>

<a name="S"><LI>Set up, initialize, solve</LI></a>
The user code for <code>MyObject</code> should include these elements
<DT>Set Up: code that is not executed (part of the <q>compilation</q> stage)</DT>
<DD>Declare <code>MyObject</code> as derived from the `Objective` class</DD>
<DD>Include data members for parameters and blocks that appear in $\psi$.</DD>
<DD>Declare and define <code>vfunc</code></DD> as a method (member function) to represent $f()$.</DT>
<DT>Initialize: code that runs before optimization begins</DT>
<DD>Assign <code>new</code> objects derived from `Parameter` to the data members for $\psi$ elements</DD>
<DD>Add parameters to the objective by sending them to `Objective::Parameters`().</DD>
<DD>Set $\psi$.0: <UL class="ul">
        <LI>to values read in from a file using <code>.optobj</code> file with `Objective::Load`()
        <LI>to a vector of length <code>N</code> sent to `Objective::Encode`().
        <LI>to the hard-coded initial values of each parameter by sending 0 to `Objective::Encode`(0)<UL></DD>
<DT>Solve: call one of the optimization or solution methods of `Objective` to solve for $\psi^\star$ sequentially.</DT>

<a name="C"><LI>Checkpointing, Restarting, and Strategies</LI></a>

<span class="n">FiveO</span> is designed to save (checkpoint) a problem in two different senses.  First, it will checkpoint the <em>objective</em> itself: the current <em>best</em> parameter vector as it is found. By default the information is stored in a file named <code>L.optobj</code>, where L is the string label assigned to the objective (`Objective::L`).  </p>

<code>MyObject</code> can save the current vector (whether best or not) using `Objective::Save`(). The format of the file is not simply a vector of numbers.  It is a summary of the problem and the current state of the solution process. The <code>.optobj</code> file is designed to be loaded back into <span class="n">FiveO</span> using `Objective::Load`(). <code>Load()</code> will check some aspects of the file for consistency, read in starting values, $\psi$.O and ignore the other information. The parameter vector in the file can be edited to reset the values. <code>MyObject</code> will always <q>hard code</q> starting values for parameters when they are created.  The code can be written so that these hard values are only used if the person wants to complete restart.  Otherwise, the starting vector, $\psi$.O, will be loaded from a file:
<DD> <pre> if (!Load(fn)) Encode(); </pre>
If <code>fn=-1</code> then <code>Load()</code> will return FALSE and do nothing.  Then <code>`Objective::Encode`(0)</code> will use the hard-coded values for $\psi$.0.  On the other hand, if <code>fn = "hello"</code>, Load() will try to load values from <code>hello.oxobj</code>, returning TRUE if successful.   Finally, if <code>fn=0</code> it will do the same but using the default file name, <code>`Objective::L`.optobj</code>. </DD>

<em>Objective checkpointing</em> means execution can be stopped without losing the progress made so far. The current best vector does not checkpoint the state of the sequential <em>algorithm</em>.  The algorithms in FiveO checkpoint their current state so that the problem can restarted exactly where it stopped in the algorithm.  For example, in `BFGS` the checkpoint reloads the current value of the Hessian.  And in `NelderMead` the checkpoint reloads the current simplex. Reading a checkpoint file is done by sending the argument <code>UseCheckPoint</code> to the algorithm's <code>Iterate()</code>.</p>

<dt>Example Sequence of Optimization Starts and Restarts</dt>
The objective <code>myobj</code> contains a 4x1 vector of parameters, $x$.  The following segments of code explain how the user would change their code while changing the objective and restarting the optimization.
<OL class="steps">
<LI>First Time: use hard-coded starting values</LI>
The user has coded everything and now wants to try maximizing the objective.  The hard-coded starting values are as good place as any to start:
<dd><pre>
    x = new Coefficients("x",zeros(4,1));
    myobj->Parameters(x);
    bfgs = new BFGS(myobj);
    bfgs -> Iterate();
</pre></dd>
<LI>Load current vector and start from there</LI>
Based on the initial attempt the user has made some changes to the objective.  One reason might be that the starting value of 0 for $x_2$ was way off and ended up at 15000.  The other parameters are all below 10 in absolute value.  SO the code was changed so that $x_2$ in units of a thousand.  This required a manual change in the <code>.optobj</code> file to start at 15 instead of 15000. Other changes made to the objective will shift the optimum in other ways as well. The algorithm should restart with the initial Hessian because changes to the objective mean the old one is not appropriate given the rescaling.  </LI>
<dd><pre>
    x = new Coefficients("x",zeros(4,1));
    myobj->Parameters(x);
    myobj->Load();          // new, read from the default .optobj file
    bfgs = new BFGS(myobj);
    bfgs -> Iterate();
</pre></dd>
The <code>Load()</code> could specify a different file to read from, but in this case the file that the previous attempt saved is used.

<li>Third Time: restart after an interruption</li>
The user is running this code on a system that limits run time and the second time ran out of time before convergence.  Now the user wants to restart from the last iteration because nothing has changed.  The current Hessian is appropriate and simply restarting at the current parameter vector will lose the information built up during the previous iterations.
<dd><pre>
    x = new Coefficients("x",zeros(4,1));
    myobj->Parameters(x);
    myobj->Load();
    bfgs = new BFGS(myobj);
    bfgs -> Iterate(UseCheckPoint);   //restart the algorithm where it left off
</pre></dd>
The <code>Load()</code> still happens but reading the <code>chkpt</code> file wipes out those values.  They would be the same.

</OL>
<a name="A"><LI>If you use <code>maximize</code> already.</LI></a>
<table cellspacing="0" cellpadding="10" border="1" width="1000">
<caption><h3>Differences between <code>maximize</code> and <span class="n">FiveO</span> At a Glance.</h3></caption>
    <tr><th>Item</th><th>In <code>Ox::maximize</code></th><th>In <span class="n">FiveO</span></th></tr>

    <tr valign="top"><td>The objective<br><var>&fnof;() : &real;<sup>N</sup>&rarr;&real;</td>
    <td><pre>MyObj(const x,const v,const G,const H){ ··· } </pre>
    <DD>Coded as a standalone function with a particular declaration</td>
    <td><pre>class MyObj : BlackBox {
        ···
        vfunc();
        }
    MyObj::vfunc() {···}</pre>
    <DD>Coded as a <code>method</code> with a particular name of a class derived from `Objective`.</td></tr>
    <tr valign="top"><td>
    The parameter vector
    $$\psi  \equiv \pmatrix{x_0& x_1 &\dots &x_{N^-}}$$
    A single parameter x
    <p>Initial value x<sup>0</sup>.
    <p>Current value: x</td>
    <td>&nbsp;<pre>
    psi = new matrix(N,1);  </pre>
    A position in <code>psi</code>
    <p>Starting values sent to a function.</DD>
    <p> Extracted by the user:  <code>decl x = psi[i];</code>.
</td>
    <td><pre>
    x = new Parameter("x",0.0);
    Parameters(x);
    &vellip;
    CV(x);</pre>
    <DD>An instance of a class derived from `Parameter` added to the model
    <DD>Initial value set at creation or manually.
    <DD>`CV`(x) or <code>x.v</code></DD></td></tr>
    <tr valign="top"><td>Related Parameters<br>(e.g. Coefficients &beta;)</td>
    <td><pre>
beta = x[2:8];
yhat = x*beta;</pre>
    <DD>extracted from the parameter vector by the user</td>
    <td><pre>beta = new Coefficients("beta",7,0);
&vellip;
yhat = x*CV(beta);</pre>
    <DD>Accessed as a separate vector without extraction.. Value <code>beta.v</code> or <code>CV(q)</code></td></tr>

    <tr valign="top"><td>Open interval constraints <br> For example, <var> 0&lt; q &lt; 1</var></td><td>
    <pre><code>prob = exp(x[0])/(1+exp(x[0]);</code></pre>
    <DD>User transforms parameters to keep them feasible</td>
    <td>
    <pre>prob = new Probability("p",0.3);</pre>
    <DD>Predefined classes such as `Positive` and `Probability`.
    <DD>User can create their own derived parameter classes.</DD></tr>

    <tr valign="top"><td>Restrictions Across Parameters</td><td>
    <pre>p = x[0:4] | 1-sumc(x[0:4]);</pre>
    <DD>Up to the user to impose and track</td>
    <td><pre> p = new Simplex("p",6);</pre>
    <DD>Dynamic interval bounds and pre-defined blocks.</td></tr>

    <tr valign="top"><td>Algorithms</td><td><pre>MaxBFGS(f,&hellip;)</pre><DD>Standalone functions.</td>
    <td><pre>obj -> Quasi(BFGS,0,0);</pre><DD>Method applied to the object.</td></tr>

    <tr valign="top"><td>Objectives that are not a `BlackBox`<br>$f = \sum f_i(\psi_i)$</td><td>Up to the user to program</td><td>Efficient and simple handling of `Separable` and `Mixture` objectives.</td></tr>

    <tr valign="top"><td>Long execution times</td><td>Current best vector not saved automatically.</td><td>Automatic `Objective::Save` of current best, which can be `Objective::Load`ed to restart.<DD>Integrated with CFMPI for parallel execution.</td></tr>
</table>

<a name="B"><LI>If you use <code>Modelbase</code> already.</LI></a>

The routines in <code>maximize</code> are low level ones that leave a great deal of work for the user.  However, Ox provides a class that provides a higher level function, <code>Modelbase</code>.  It  would often be a better and more convenient way to develop an econometric application than a direct use of <code>maximize</code> .  And its approach can be better than <span class="n">FiveO</span> for coding econometric models to account for variable selection, parameter definitions that are primarily coefficients on variables.

<p><span class="n">FiveO</span> is not concerned with variables, observations and coefficients.  Rather, it is concerned with parameterizing a model that involves optimization in a much more general sense than something related to linear econometric models.  The fact that the objective may be related to data as well is not primary to <span class="n">FiveO</span>.

<p>In <code>Modelbase</code> aspects of parameters are stored separately, at least from the user's perspective.  Parameters can be fixed or free, but other kinds of constraints and relationships between parameters are left to the user. A key difference with <span class="n">FiveO</span> is that parameters are represented as objects derived from built-in parameter types.  Parameters are created using a class that captures the constraints on the parameter and its relation to other parameters.  For example, with one line of code a user can add a vector of parameters that are guaranteed to be `Increasing` during optimization: <var>x<sub>1</sub> &gt;x<sub>2</sub> &gt; ··· &gt x<sub>M</sub>.
</OL>

@author &copy; 2011-2019 <a href="http://econ.queensu.ca/~ferrall">Christopher Ferrall</a>
</DD>

**/
