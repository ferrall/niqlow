/**A Quick Start <span class="n">FiveO</span> by Example.

@sortkey AAA

@example Files referred to:
<pre>niqlow/examples/Rosenbrock.ox
niqlow/examples/SysExample.ox
niqlow/examples/GetStartedFiveO.ox
</pre>
To run the program and see results:
<pre>oxl GetStartedFiveO</pre></dd>

<DT> In <span class="n">FiveO</span> optimization and system solving (root finding) are treated nearly the same.  This shows an example of both.</DT>

<h3>If your interest is primarily system solving, go <a href="#B">here</a></h3>.

<a name="A"><h1>Optimization Example: Rosenbrock</h1></a>
<OL class="contents">
	<LI><a href="#AA">Define the Problem</a></LI>
	<LI><a href="#AB">Code the Objective</a></LI>
        <LI><a href="#AC">Optimize</a></LI>
        <LI><a href="#AD">Results</a></LI>
        <LI><a href="#AE">Variations</a></LI></OL>


<OL class="body">

<a name="AA"><LI>Define the Problem</LI></a>
Consider the two-parameter <a href="http://en.wikipedia.org/wiki/Rosenbrock_function">Rosenbrock Function</a>, also used in Ox as an example.
<DT>The parameter vector and space:</DT><DD> <code> &psi; &equiv; (x y),  x, y &in; (-&infin;,+&infin;) </code></DD>
<DT>The objective:</DT> <DD><code>&fnof;(&psi;) &equiv; -[ (1-x)<sup>2</sup>+100(y - x<sup>2</sup>)<sup>2</sup>]</code></DD>
<DT>Starting values</DT><DD><code>&psi;.0 = (0.5,-.8)</code></DD>
<DT>The global maximum:</DT><DD> <code>&psi;* = (1 1)<br> &fnof;(&psi;*) = 0</code></DD>
<DT>Algorithms:</DT>
    <DD>`NelderMead` Simplex</DD>
    <DD>`BFGS` to <q>polish</q> the values.</DD>

<a name="AB"><LI>Code the objective</LI></a>
<dd><details><summary>Source: <a href="../../examples/Rosebrock.ox">niqlow/examples/Rosenbrock.ox</a></summary>
<pre><object width="75%" height="200" type="text/plain" data="../../examples/Rosenbrock.ox" border="1" ></object></pre></details>
<DL>Line-by-line Explanation
<DT><code>#import "FiveO"</code></DT>
<DD>The first line says this Ox code relies on <span class="n">FiveO</span>.  It could also <code>#import niqlow</code> since it includes FiveO.</DD>
<DT><code>struct Rosenbrock : BlackBox { &hellip; }</code></DT>
<DD>The next five lines declare the class of the objective, named <code>Rosenbrock</code>. This is a a `BlackBox` objective, so we derive <code>Rosenbrock</code> from that predefined class. The objective has two parameters, <code>x</code> and <code>y</code> declared as data members of the Rosenbrock class.</DD>
<DD>Next, the <defn>constructor</defn>, <code>Rosenbrock()</code>, is declared, a method with the same name as the class which is called when <code>new Rosenbrock()</code> is executed.</DD>
<DD>The method that codes &fnof;() itself is declared and <em>must</em> have the name <code>vfunc()</code>.  The v means that it can return a <b>v</b>ector of values to sum up to compute the objective.  That is <pre>
&fnof;() = &sum;<sub>i</sub> vfunc()[i].</pre>
This makes it easier to use the `BHHH` approximation for the Hessian and to relate objectives with non-linear systems. <code>vfunc()</code> takes no arguments.  The current values of the parameters are passed through the members of the class.</DD>

<DT><code> Rosenbrock ::Rosenbrock () { &hellip; }</code></DT>
<DD>This method initializes the problem.  First, it is <em>necessary</em> for the objective to call the <q>constructor</q> for the parent class, in this case <code>BlackBox()</code>, which takes a string to label output.</DD>
<DD>Next the parameters of the objective are created.  In this problem both <var>x</var> and <var>y</var> can take on any value: <var> -&infin; &lt; x &lt; +&infin;</var>  and the same for <var>y</var>.  <span class="n">FiveO</span> designates this as a `Free` parameter.</DD>
<DD>Every parameter can be given a label and an initial value can be passed when the parameter is created.  The values passed, in this case 0.5 and -0.8, are default starting values that can be used to completely reset the problem. Under some conditions this value will be the actual starting value for the parameter during optimization (x<sub>0</sub>).  But this value can be replaced with a different starting value before optimization begins.  This means it is not necessary to change this code to change the starting values, but as a fail safe reasonable starting values are hard-coded.  </DD>
<DD><span class="n">FiveO</span>  must know about the parameters, so they are added to the objective with `Objective::Parameters`().  These three commands to define the parameters and add them can be collapsed to one complicated one:
<code>Parameters(x = new Free("x",0.5),y = new Free("y",-.8));</code></DD>

<DT>Encode()</DT><DD><code>Encode()</code> sets the real starting values of the parameters at their current values, in this case the hard-coded values 0.5 and -0.8.  A vector of different values could be sent to <code>Encode()</code>, and starting values can be read from a specially formatted file using <code>`Objective::Load`()</code>.  This will attempt to load starting values saved during an earlier optimization run stored in the current folder.  </DD>
<!--""If successful <code>Load()</code> returns <code>TRUE</code>  If unsuccessful then <code>Encode()</code> will set the starting values at whatever the current values are.  `Objective::Encode`() can also take a vector to use as the starting values.-->

<DT><code>Rosenbrock ::vfunc() {&hellip;}</code></DT>
<DD>This codes the objective itself.  The current values of the parameters are <em>not</em> passed through a vector to be decoded by the user's code (as is typcially done
with generic optimizers and user-defined objectives). </DD>
<DD>Instead, <span class="n">FiveO</span> always places the current values in the members <code>x</code> and <code>y</code> before calling <code>vfunc()</code>.  </DD>
<DD>One member of any `Parameter` object is <code>v</code>, which is where FiveO puts the values.</dd>
<DD>So <code>x.v.</code> is the value of the parameter object <code>x</code> and <code>y.v</code> is the value of <code>y</code>.  The code uses the <span class="n">niqlow</span> defined function `CV`(), which will retrieve the value of <code>v</code> for objects passed to it.</DD>
<DD>Since the Rosenbrock function refers to value of <code>x</code> twice, the code stores the value of <code>x</code> in a local variable (<code>xv</code>).</DD>
<DD>The advantage of <code>CV(y)</code> over <code>y.v</code> is that it will retrieve the value regardless of whether its argument is a `Parameter`, an Ox double, an Ox integer, or even a function that returns the value.  This means that <code>y</code> can be changed from a constant to a parameter to maximize over to a function of other parameters without changing <code>vfunc()</code>.</DD>
</DL>

<a name="AC"><LI>Optimize</LI></a>

<span class="n">FiveO</span> imposes constraints and scaling on the parameters.  To do this it operates on a <defn>free</defn> vector, stored in `Objective::cur`.F which typically begins as a vector of ones.  Before the user-supplied <code>vfunc()</code> is called <code>F</code> is decoded and re-scaled to create the <q>structural</q> parameter vector, `Objective::cur`.X.  Because the values in <code>X</code> are copied into each parameters <code>v</code> member, the user is never required to work with <code>F</code> and <code>X</code> directly.

<DD>`Objective::Decode` and `Objective::Encode` are the routines that work between the free and structural parameter vectors.</DD>

<DT>The code above is then used in a program, perhaps by using <code>#include</code>:</DT>
<details><summary>Source: <a href="../../examples/GetStartedFiveO.ox">GetStartedFiveO.ox</a></summary>
<pre><object width="75%" height="200" type="text/plain" data="../../examples/GetStartedFiveO.ox" border="1" ></object></pre></details>
<DL>Line-by-line Explanation
<DT>Include</DT>
<DD>First the code for the problem is included in the program.  If the declaration and definition of the <code>Rosenbrock</code> class were placed in separate <code>.oxh</code> and <code>.ox</code> files, then it could be <em>imported</em> instead of <em>included</em>, which is sometimes better when using shared code or possibly combining files that might try to include the same file more than once. </DD>
<DT><code>main(){&hellip;}</code>
<DD>Like C programs, all Ox programs must contain a <code>main()</code> procedure which is where execution starts.</DD>
<DD><code>fopen("file","l")</code> captures all output of the program as a log file, so that it can be included in this document below.</DD>
<DD>The objective will be created and stored in the local main variable <code>obj</code> as will  and the two algorithms will used to optimize it, which are stored in <code>alg1</code> and <code>alg2</code>.  </DD>
<DT>Algorithm and Objective Objects</DT>
<DD>These are objects of classes, so they are assigned the return value of the  <code>new </code> statement.  Note that the `Algorithm`s in <span class="n">FiveO</span> require the objective to be optimize be sent as the argument of the creator function.  Multiple objectives can be defined, and each can have algorithms associated with it.  But once created,
  each algorithm object is associated with the objective sent to it. <details class="aside"><summary>A difference with <span class="n">DDP</span></summary>In <a href="..\DDP\default.html">DDP</a> only a single DP problem is defined at a time because it relies heavily on <code>static</code> members to save storage. However,
  <span class="n">FiveO</span> avoids <code>static</code> variables so multiple objectives and multiple algorithms can all be created without creating memory conflicts
  that static allocation creates.</details>
<DT>Volume of output generated</DT>
<DD>Objective, Algorithm, Bellman and Method classes in <span class="n">niqlow</span> all have <code>Volume</code> data members.  These can set separately to control how much output is produced.  See `NoiseLevels`</DD>
<DD>Here, the volume of each object is set to <code>LOUD</code> which means they will produce a large amount of output (but not the maximum which is <code>NOISY</code>)</DD>
<DT>Iterate</DT>
<DD>To apply an optimization algorithm to objective, simply call its <code>Iterate()</code> method.  </DD>
<DD>Different algorithms take different arguments in <code>Iterate</code>, but often the defaults apply so <code>Iterate()</code> may work as desired.  The parameters of algorithms can be `Algorithm::Tune`d before iterating.</DD>
<DD>When <code>NelderMead</code> ends  it leaves the best value of the free parameters in `Objective::cur`.F, and the structural parameters in `Objective::cur`.X.  When `GradientBased::Iterate`() is invoked it starts at the same structural parameters but resets the free parameters.</DD>
<DT>`Objective::ReInitialize`()</DT>
<DD>This resets all parameters of the objective to the values before optimizing (at their hard-coded inital values).  This is done to compare <code>NelderMead</code> and <code>Newton</code> from the same starting point.</DD>
<DT>Delete</DT>
<DD>It's a good idea to use <code>delete</code> to clean up  objects that have been created and will not be needed anymore.</DD>
<DD>This is especially true because this example also shows how to solve a non-linear system and reuses the variables <code>alg1</code> and <code>alg2</code>. If they were not deleted first, the memory they currently use would be wasted (and in a large application may become a memory leak).</DD>

<a name="AD"><LI>Results</li></a>
<DT>From the directory that contains the program, it can be run from a command line as:</DT>
<DD><pre>oxl GetStartedFiveO</pre>
The output to the OxEdit screen would include the segment captured by the log as show here:<pre>
<details><summary>Source: <a href=""../../examples/output/Rosenbrock.txt">niqlow/examples/output/Rosenbrock.txt</a></summary>
<pre><object width="75%" height="200" type="text/plain" data="../../examples/output/Rosenbrock.txt" border="1" ></object></details>
</pre></dd>

<DT>Explanation</DT>
<DD>After 133 function evaluations NelderMead reports that the simplex has collapsed (converged).  Sometimes in large, less well-behaved problems, it can be better to reset the simplex after a certain number of function evaluations, but in this case it is unnecessary. </DD>

<DD>The <em>free</em> parameter for <var>x</var> has gone from 1.0 to 2.0, and for <var>y</var> it has gone from 1.0 (since <var>y</var> to about -1.25.  What this means for the real parameters is stated in the final report once Simplex converges: the <em>actual</em> or <em>structural</em> parameters have converged to within 1.0E-5 of the true optimal values <var>x* = y* = </var> 1.0.</DD>

<DD>Next we see that BFGS agrees.  It does not iterate because the norm of the gradient <code>&nabla;&fnof;</code> is close enough to 0 to declare convergence immediately. It terminates without changing the parameters.</DD>

<DT>ReInitialize</DT>

<DT>Saved values on disk</DT>

<DD>Each time <span class="n">FiveO</span>  finds an improvement on the objective function it reports on the screen (unless running <code>QUIET</code>ly) and writes out to a file.  This is designed for slow and difficult optimization problems that one often kills the program before convergence and restarts.  Here is the file produced at the end of the process.<pre>Source:  niqlow/doc/examples/Rosenbrock.Get_Started.optobj
<object width="75%" height="200" type="text/plain" data="../../examples/Rosenbrock.Get_Started.optobj" border="1" ></object>
</pre></DD>

<DD>The top part of the file is printed using Ox's <a href="http://www.doornik.com/ox/oxstd.html#TabStd2"><q>%v</q></a> format, which ensures accuracy reading the values back in using `Objective::Load`.  The best parameter vector starts on line 4 and continues until <q>&gt;</q> is reached, in this case it is a 2&times;1 vector.  The rest of the file is for information.  In particular, the structural vector is printed again with labels, but notice with not quite as many digits.</DD>

<DD>The user could start at these values by adding <code>obj-&gt;Load(0)</code> before the first algorithm is invoked.  The 0 means <code>Load()</code> will look in the file created by optimization.  The user could also copy the file to <code>Joe.optobj</code>, change the starting values and start there with <code>obj-&gt;Load("Joe");</code>.  This means that the user can conveniently read starting values from files after saving the default hard-coded values once or the current best vector at any point in a first optimization attempt.</DD>

<DT>Using final values in the code</DT>

<a name="AE"><LI>Variations</li></a>
<DL>
<DT>Other parameter types and parameter blocks</DT>
<DT>Separable Objectives</DT>
<DT>Mixture Objectives</DT>
<DT>Parallel Execution</DT>
</DL>
</OL>

<a name="B"><h1>System Example: lagged equations </h1></a>
<OL class="contents">
	<LI><a href="#BA">Code the System</a></LI>
        <LI><a href="#BB">Solve</a></LI>
        <LI><a href="#BC">Results</a></LI>
        <LI><a href="#BD">Variations</a></LI></OL>

<OL class="body">

<DT>This example is also taken from Ox</DT>
 <DD>(see Ox <a href="http://www.doornik.com/ox/oxpackages.html#SolveNLE">SolvenLE</a> and <code>../Ox/exmples/maximize/solvene2.ox</code>).</DD>

<DT>The System</DT>
<DD><pre>
Parameter vector:
  &psi; = ( x<sub>0</sub> ··· x<sub>N&oline;</sub> )
System of equations in &psi;
  &fnof; (&psi;) =  (3-2x<sub>t</sub>)x<sub>t</sub> - x<sub>t-1</sub> - 2*x<sub>t+1</sub> + 1,  for t = 1,&hellip;,N</pre></DD>
<DD>The solution is a N-vector &psi;* for which &fnof;(&psi;*) = <b>0</b> (a N-vector of zeros).</DD>

<LI><a name="BA">Code the System</a></LI>

<dd><details><summary>Source: <a href="../../examples/SysExample.ox">niqlow/examples/SysExample.ox</a></summary>
<pre><object width="75%" height="200" type="text/plain" data="../../examples/SysExample.ox" border="1" ></object></pre></details>
<DL>Line-by-line Explanation
<DT><code>#import "FiveO"</code></DT>
<DD>Code refers to classes and functions defined in <span class="n">FiveO</span> so import the module.</DD>
<DT><code>struct SysExample : System { &hellip; } </code></DT>
<DD>As with an objective to optimize, the user creates the system of equations
they want to solve as class derived from a built-in class,  in this case `System`, which is derived or special case of `Objective` so it very similar to the example above.</DD>
<DD>Parameters to choose are stored in a member of the class (here <code>x</code>).</DD>
<DD>Your class has to have creator method (same name as the class itself) because
it will have to call the creator for the parent class.
<details class="aside"><summary>Ox Creators</summary>If you a class <code>Child</code> is derived from <code>Parent</code>, then the
expression <code>new Child()</code> will call the routine <code>Child::Child()</code> as part of creating the new object.  If <code>Child::Child()</code> was not defined
nothing is called.  So if <code>Parent::Parent()</code> exists (and in <span class="n">FiveO</span> it does and must be called), then the child class has to have
a creator defined and one (and perhaps the only) it does is call <code>Parent()</code>. As a derived class it could use <code>Parent::Parent()</code>, but this is not necessary because it inherits all the methods of the parent class and these are considered part of it so the prefix <code>Parent::</code> is not needed.</details></DD>
<DD>The system of equations is computed and returned by a method that must be called <code>vfunc()</code>.  As discussed above, <code>vfunc()</code> is always expected to return a vector even if the class is an objective not a system of equations.  The difference with `System` and with most system solution algorithms is that the
vector is not aggregated into a real number.</DD>
<DT><code>SysExample::SysExample(N){&hellip;}</code></DT>
<DD>THe creator takes the length of the vector as an argument (in the example
<code>N=8</code>, but in the source Ox example it is 99).</DD>
<DD>It calls the parent creator, and in the case of a system it must send the size of
the system.</DD>
<DD>In this case it also defines the parameter a vector of `Coefficients`, which means a vector of `Free` parameters like regression coefficients.  Note that the system need not use vectors.  Like the Rosenbrock example above it could give each parameter a different name and store each in different members of the class..</DD>
<DD>Parameters are added to the objective with `Objective::Parameters`().</DD>
<DD>`Objective::Encode`() can only be called after all parameters have been added.  It can take a argument, but with no arguments each parameter is set to its hard coded value.  When <code> x </code> was defined it initialized each one to be <code>0</code></DD>
<DT><code>SysExample::vfunc() {&hellip; }</code></DT>
<DD>This method computes and returns the system of equations as a function of
the current value of parameters added to the model.</DD>
<DD>As discussed above and elsewhere, since parameters are objects their current value is held in its `Quantity::v` member (along with other information) and can be
retrieved directly or through the more general `CV`() routine.</DD>
<DD> Since
the formula for the system involves three references to the <code>x</code> vector, it is a little more reliable and efficient to get and  store the current value rather than access 3 times. The formula is copied from the Ox example and uses the built-in <code>lag0()</code> function.</DD>
<LI><a name="BB">Solve</a></LI>
To solve the system, an object of the class must be created.  Then an appropriate
`Algorithm` object is created and applied to the object.

<DT>Here again is the code for both examples: </DT>
<details><summary>Source: <a href="../../examples/GetStartedFiveO.ox">GetStartedFiveO.ox</a></summary>
<pre><object width="75%" height="200" type="text/plain" data="../../examples/GetStartedFiveO.ox" border="1" ></object></pre></details>
<DL>Line-by-line Explanation (starting from where it ended above)
<DT><code>fopen</code></DT>
<DD>Having closed the log file, this opens a new one so that the output of the two
examples can be shown separately.</DD>
<DT>System and Methods</DT>
<DD>THe system is created as are two algorithms appropriate for solving a `System`. In particular, they are derived from `NonLinearSystem`, which is analogous to
`GradientBased` family of optimizers.</DD>
<DD>The variables <code>alg1</code> and <code>alg2</code> are re-used to
store these methods.</DD>
<DD>As with optimization, the objective is sent as the only argument to the
algorithm that will work on it.  Multiple algorithms and systems (including nested ones)
can be created, but by sending the system to the algorithm at creation a 1-system for each method mapping is ensured.  (However, the same system can be sent to multiple algorithms, so 1-or-more methods for each system.)</DD>
<DD>`Objective::ToggleParameterConstraint`() is explained elsewhere and is optional, but seems to improve performance in this case.</DD>
<DD>Volume of outptut is exampled above </DD>
<DT><code>Iterate()</code></DT>
<DD>To apply the algorithm to its objective call `NonLinearSystem::Iterate`()</DD>
<DD>The example shows that after iterating the parameter values are left at their
final values and subsequent iterations start there.  This can be changed by calling
`Objective::Encode`() and sending a new vector to start out or (in this example)
`Objective::ReInitialize`() to the hard-coded values.</DD>
</DL>
<LI><a name="BC">Results</a></LI>
<DT>From the directory that contains the program, it can be run from a command line as:</DT>
<DD><pre>oxl GetStartedFiveO</pre>
The output to the OxEdit screen would include the segment captured by the log as show here:<pre>
<details><summary>Source: <a href="../../examples/output/SysExample.txt">niqlow/examples/output/SysExample.txt</a></summary>
<pre><object width="75%" height="200" type="text/plain" data="../../examples/output/SysExample.txt" border="1" ></object></details>
</pre></dd>
<DT>Explanation</DT>


<LI><a name="BD">Variations</a></LI></OL>

</OL>
@author &copy; 2011-2017 <a href="http://econ.queensu.ca/~ferrall">Christopher Ferrall</a></dd>

**/
