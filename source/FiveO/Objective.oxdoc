/** Derive <code>MyObjective</code> from an Objective class.
<a href="#auto"><span class="skip"><abbr title=" Skip down to items defined in Objective.ox">&nbsp;&#8681;&nbsp;</abbr></span></a>

@sortkey ABB

A user defines a non-linear objective as a class derived from `Objective`.  Currently the main types are:
<UL>
<LI>`UnConstrained`: an objective to maximize without imposing equality and inequality constraints on paramers.  In turn,
unconstrained objectives should be derived from one of three sub-classes:</LI>
<UL>
<LI>A <a href="BlackBox.ox.html">BlackBox</a>: the objective is a `BlackBox` objective.</LI>
<LI><a href="Separable.ox.html">Separable</a>: the objective is the `Separable` sum of K blackbox objectives.  Some parameters can be common across the objectives. </LI>
<LI><a href="Separable.ox.html">Mixture</a> the objective is a `Mixture`: a separable mixture of K problems over G different environments.  A separable objective is a special case where the G=1 and weights are fixed.</LI>
</UL>
<LI>`Constrained`: an objective to maximize subject to equality and inequality constraints using sequential quadratic programming (`SQP`).</LI>
<LI>`System`:  A square system of non-linear equations for which roots are to be found.  See <a href="NonLinearSystem.html">Non-Linear System</a> for details.</LI>
</UL>

<DT>The objective &fnof;(&psi;)  is provided by the user as <code>MyObjective::vfunc()</code>.</DT>
<DD>The v indicates that it can return the vector of values that, if summed up, is the value of the objective at the current parameter values.</DD>

<DT>Parameters to choose to optimize the objective are represented by an object derived from the `Parameter` class.  </DT>
<DD>Different parameters classes are defined to constrain individual parameters to open regions.</DD>
 <DD>Related parameters are handled in a `ParameterBlock`.  See <a href="Parameters.ox.html">Parameters</a> for details.</DD>

<DT>Parameters are added to the objective using `Objective::Parameters`(). </DT>

<DT>The work of optimization of the objective (or solution to the system) is done using a method of the `Algorithm` class.</DT>
<DD>When an algorithm object is created the objective is sent as a argument and is assigned as a <code>constant</code> member.  So during execution an algorithm object is associated with a single objective, but multiple algorithms can be applied to the same objective.  This allows for a comparison of algorithms and/or applying a sequence of algorithms in order to carry out the optimization.</DD>



<a name="auto"><hr><h1>Documentation of  Items Defined in Objective.ox <a href="#"><span class="skip"><abbr title=" Back to top">&nbsp;&#8679;&nbsp;</abbr></span></a></h1></a>

**/
